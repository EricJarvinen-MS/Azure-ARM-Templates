{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"metadata": {
		"description": "Deploys several Connectivity labs to one Resource Group.",
		"author": "Ryan McCallum",
		"alias": "RYMCCALL",
		"GitHub": "https://github.com/rjmccallumbigl/Azure-ARM-Templates",
		"Enablement": "https://learn.microsoft.com/en-us/troubleshoot/azure/virtual-machines/welcome-virtual-machines",
		"deploymentLink": "https://labbox.azurewebsites.net/api/Labbox?url=https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main/ConnectivityLabs.json"
	},
	"parameters": {
		"adminUsername": {
			"type": "String",
			"defaultValue": "azureadmin",
			"maxLength": 20,
			"metadata": {
				"description": "Username for the Virtual Machines."
			}
		},
		"adminPassword": {
			"type": "SecureString",
			"minLength": 12,
			"metadata": {
				"description": "Password for the Virtual Machines."
			}
		},
		"location": {
			"defaultValue": "[resourceGroup().location]",
			"type": "String",
			"metadata": {
				"description": "Location for all resources."
			}
		},
		"vmSize": {
			"defaultValue": "Standard_B2ms",
			"type": "String",
			"metadata": {
				"description": "Default VM Size."
			}
		},
		"storageUri": {
			"defaultValue": "[format('store{0}', uniqueString(resourceGroup().id))]",
			"type": "string",
			"metadata": {
				"description": "Name of storage account For Boot Diagnostics"
			}
		},
		"storageAccountType": {
			"type": "string",
			"defaultValue": "Standard_LRS",
			"metadata": {
				"description": "Storage Account type"
			}
		}
	},
	"variables": {
		"nicName": "myVMNic",
		"addressPrefix": "10.0.0.0/16",
		"subnetName": "Subnet",
		"subnetPrefix": "10.0.0.0/24",
		"subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
		"windowsVMName": "WindowsLab",
		"linuxVMName": "LinuxLab",
		"virtualNetworkName": "MyVNET",
		"publicIPAddressName": "myPublicIP",
		"networkSecurityGroupName": "default-NSG",
		"windowsVMCount": 16,
		"linuxVMCount": 4
	},
	"resources": [
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2020-08-01",
			"name": "[concat(variables('publicIPAddressName'), copyIndex(1))]",
			"copy": {
				"name": "publicIPcopy",
				"count": "[add(variables('windowsVMCount'),variables('linuxVMCount'))]"
			},
			"location": "[parameters('location')]",
			"properties": {
				"publicIPAllocationMethod": "Dynamic"
			}
		},
		{
			"type": "Microsoft.Network/networkSecurityGroups",
			"apiVersion": "2020-08-01",
			"name": "[variables('networkSecurityGroupName')]",
			"location": "[parameters('location')]",
			"properties": {
				"securityRules": [
					{
						"name": "default-allow-3389",
						"properties": {
							"priority": 1000,
							"access": "Allow",
							"direction": "Inbound",
							"destinationPortRange": "3389",
							"protocol": "Tcp",
							"sourceAddressPrefix": "*",
							"sourcePortRange": "*",
							"destinationAddressPrefix": "*"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks",
			"apiVersion": "2020-08-01",
			"name": "[variables('virtualNetworkName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
			],
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [
					{
						"name": "[variables('subnetName')]",
						"properties": {
							"addressPrefix": "[variables('subnetPrefix')]",
							"networkSecurityGroup": {
								"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2020-08-01",
			"name": "[concat(variables('nicName'), copyIndex(1))]",
			"copy": {
				"count": "[add(variables('windowsVMCount'),variables('linuxVMCount'))]",
				"name": "nicCopy"
			},
			"location": "[parameters('location')]",
			"dependsOn": [
				"publicIPcopy",
				"[variables('virtualNetworkName')]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'), copyIndex()))]"
							},
							"subnet": {
								"id": "[variables('subnetRef')]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2021-06-01",
			"name": "[parameters('storageUri')]",
			"location": "[parameters('location')]",
			"sku": {
				"name": "[parameters('storageAccountType')]"
			},
			"kind": "StorageV2",
			"properties": {}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('windowsVMName'), copyIndex(1))]",
			"apiVersion": "2020-12-01",
			"copy": {
				"count": "[variables('windowsVMCount')]",
				"name": "windowsVMcopy"
			},
			"location": "[parameters('location')]",
			"dependsOn": [
				"nicCopy"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[parameters('vmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('windowsVMName'), copyIndex(1))]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "MicrosoftWindowsServer",
						"offer": "WindowsServer",
						"sku": "2019-Datacenter",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage",
						"managedDisk": {
							"storageAccountType": "StandardSSD_LRS"
						}
					}
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyIndex(1)))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[concat('https://', parameters('storageUri'), '.blob.core.windows.net')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2020-12-01",
			"name": "[concat(variables('linuxVMName'), copyIndex(1))]",
			"copy": {
				"count": "[variables('linuxVMCount')]",
				"name": "linuxVMcopy"
			},
			"location": "[parameters('location')]",
			"dependsOn": [
				"nicCopy"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[parameters('vmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('linuxVMName'), copyIndex(1))]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "RedHat",
						"offer": "rhel-raw",
						"sku": "8-raw",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage",
						"managedDisk": {
							"storageAccountType": "StandardSSD_LRS"
						}
					}
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyIndex(variables('windowsVMCount'))))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[concat('https://', parameters('storageUri'), '.blob.core.windows.net')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '1', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'1')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {& \"$env:windir\\system32\\sysprep\\Sysprep.exe\" /generalize /reboot /oobe;}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '2', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'2')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {bcdedit /delete '{bootmgr}' /f; Restart-Computer -Force}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '3', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'3')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {bcdedit /delete '{current}' /f; Restart-Computer -Force}"
				},
				"timeoutInSeconds": 60
			}
		},
		// {
		// 	"type": "Microsoft.Compute/virtualMachines/runCommands",
		// 	"apiVersion": "2021-11-01",
		// 	"name": "[concat(variables('windowsVMName'), '4', '/injectRunCommand')]",
		// 	"location": "[resourceGroup().location]",
		// 	"dependsOn": [
		// 		"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'4')]"
		// 	],
		// 	"properties": {
		// 		"source": {
		// 			"script": "Start-Process powershell -Verb runAs -ArgumentList {}"
		// 		},
		// 		"timeoutInSeconds": 60
		// 	}
		// },
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '6', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'6')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {netsh advfirewall firewall set rule name=\"Remote Desktop - User Mode (TCP-In)\" new enable=no}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '7', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'7')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {Start-Sleep 60; Stop-Service -Name \"dhcp\" -Force; Set-Service -Name \"dhcp\" -StartupType Disabled; Restart-Computer -Force;}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '8', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'8')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {bcdedit /set safeboot minimal; Restart-Computer -Force;}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '9', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'9')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {Get-NetFirewallrule -DisplayName \"Remote Desktop - User Mode (TCP-In)\" | Get-NetFirewallAddressFilter | Set-NetFirewallAddressFilter -RemoteAddress 192.168.1.10; bcdedit /ems ''{current}'' off; Restart-Computer -Force;}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '10', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'10')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\TermService\\Parameters' -name 'ServiceDll' '%SystemRoot%\\System32\\rdp.dll' -Type ExpandString; Restart-Computer -Force}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '11', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'11')]"
			],
			"properties": {
				"source": {
					"scriptUri": "https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main/Scripts/gaUninstalled.bat"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '12', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'12')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.0\\Server\" /v Enabled /t REG_DWORD /d 0 /f; reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.1\\Server\" /v Enabled /t REG_DWORD /d 0 /f; reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.2\\Server\" /v Enabled /t REG_DWORD /d 0 /f; shutdown /r /t 5}"
				},
				"timeoutInSeconds": 60
			}
		},
		// {
		// 	"type": "Microsoft.Compute/virtualMachines/runCommands",
		// 	"apiVersion": "2021-11-01",
		// 	"name": "[concat(variables('windowsVMName'), '13', '/injectRunCommand')]",
		// 	"location": "[resourceGroup().location]",
		// 	"dependsOn": [
		// 		"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'13')]"
		// 	],
		// 	"properties": {
		// 		"source": {
		// 			"script": "Start-Process powershell -Verb runAs -ArgumentList {}"
		// 		},
		// 		"timeoutInSeconds": 60
		// 	}
		// },
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '14', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'14')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {Net localgroup Users Interactive /delete;Net localgroup Users \"Authenticated Users\" /delete }"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '15', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'15')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {New-Item -Path \"HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\" -Name \"Citrix\";Set-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Citrix\" -Name \"DisplayName\" -Value \"Citrix\"; Set-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Citrix\" -Name \"DisplayVersion\" -Value 2.00.4333; Set-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Citrix\" -Name \"InstallDate\" -Value 20200210;Set-ItemProperty -Path \"HKLM: \\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Citrix\" -Name \"Publisher\" -Value \"Citrix\";reg add \"HKLM\\SYSTEM\\CurrentControlSet\\control\\Terminal Server\\Winstations\\RDP-Tcp\" /v LoadableProtocol_Object /t REG_SZ /d \"RPM.CtxRdpProtocolManager\" /f; Restart-Computer -force }"
				},
				"timeoutInSeconds": 60
			}
		},
		// {
		// 	"type": "Microsoft.Compute/virtualMachines/runCommands",
		// 	"apiVersion": "2021-11-01",
		// 	"name": "[concat(variables('windowsVMName'), '16', '/injectRunCommand')]",
		// 	"location": "[resourceGroup().location]",
		// 	"dependsOn": [
		// 		"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'16')]"
		// 	],
		// 	"properties": {
		// 		"source": {
		// 			"script": "Start-Process powershell -Verb runAs -ArgumentList {}"
		// 		},
		// 		"timeoutInSeconds": 60
		// 	}
		// },
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('linuxVMName'), '1', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('linuxVMName')),'1')]"
			],
			"properties": {
				"source": {
					"scriptUri": "https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main/Scripts/updateFstab.sh"
				},
				"timeoutInSeconds": 60
			}
			// },
			// {
			// 	"type": "Microsoft.Compute/virtualMachines/runCommands",
			// 	"apiVersion": "2021-11-01",
			// 	"name": "[concat(variables('linuxVMName'), '2', '/injectRunCommand')]",
			// 	"location": "[resourceGroup().location]",
			// 	"dependsOn": [
			// 		"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('linuxVMName')),'2')]"
			// 	],
			// 	"properties": {
			// 		"source": {
			// 			"scriptUri": ""
			// 		},
			// 		"timeoutInSeconds": 60
			// 	}
			// },
			// {
			// 	"type": "Microsoft.Compute/virtualMachines/runCommands",
			// 	"apiVersion": "2021-11-01",
			// 	"name": "[concat(variables('linuxVMName'), '3', '/injectRunCommand')]",
			// 	"location": "[resourceGroup().location]",
			// 	"dependsOn": [
			// 		"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('linuxVMName')),'3')]"
			// 	],
			// 	"properties": {
			// 		"source": {
			// 			"scriptUri": ""
			// 		},
			// 		"timeoutInSeconds": 60
			// 	}
		}
	]
}
