{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"metadata": {
		"description": "Dual pass encryption.",
		"author": "Ryan McCallum",
		"alias": "RYMCCALL",
		"GitHub": "https://github.com/rjmccallumbigl/Azure-ARM-Templates",
		"Enablement": "https://github.com/Azure/azure-quickstart-templates/tree/master/quickstarts/microsoft.compute/encrypt-running-linux-vm",
		"Enablement2": "learn.microsoft.com/en-us/azure/virtual-machines/extensions/azure-disk-enc-linux",
		"deploymentLink": "https://labbox.azurewebsites.net/api/Labbox?url=https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main/dualPassEncryption.json"
	},
	"parameters": {
		"adminUsername": {
			"type": "String",
			"maxLength": 20,
			"metadata": {
				"description": "Username for the Virtual Machine."
			}
		},
		"adminPassword": {
			"type": "SecureString",
			"minLength": 12,
			"metadata": {
				"description": "Password for the Virtual Machine."
			}
		},
		// "objectId": {
		// 	"type": "string",
		// 	"metadata": {
		// 		"description": "Specifies your object ID. Get it by using the following cmdlet: Get-AzADUser -SignedIn"
		// 	}
		// },
		"vmSize": {
			"defaultValue": "Standard_B2ms",
			"type": "String",
			"metadata": {
				"description": "Default VM Size"
			}
		},
		"storageUri": {
			"defaultValue": "[format('store{0}', uniqueString(resourceGroup().id))]",
			"type": "string",
			"metadata": {
				"description": "Name of storage account For Boot Diagnostics"
			}
		},
		"storageAccountType": {
			"type": "string",
			"defaultValue": "Standard_LRS",
			"metadata": {
				"description": "Storage Account type"
			}
		},
		// "keyVaultName": {
		// 	"type": "string",
		// 	"metadata": {
		// 		"description": "Name of the KeyVault to place the volume encryption key."
		// 	},
		// 	"defaultValue": "[tolower(concat('kv', uniquestring(resourceGroup().id)))]"
		// 	// "defaultValue": "kvscripttest4"
		// },
		// "aadAppName": {
		// 	"type": "string",
		// 	"metadata": {
		// 		"description": "Name of the AAD app used for your dual pass encryption."
		// 	},
		// 	"defaultValue": "[tolower(concat('aadapp', uniquestring(resourceGroup().id)))]"
		// },
		// "keyEncryptionKeyURL": {
		// 	"type": "string",
		// 	"defaultValue": "",
		// 	"metadata": {
		// 		"description": "URL of the KeyEncryptionKey used to encrypt the volume encryption key"
		// 	}
		// },
		// "keyEncryptionAlgorithm": {
		// 	"type": "string",
		// 	"defaultValue": "RSA-OAEP",
		// 	"metadata": {
		// 		"description": "keyEncryptionAlgorithm used to wrap volume encryption key using KeyEncryptionKeyURL"
		// 	}
		// },
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Default location"
			}
		},
		// "volumeType": {
		// 	"type": "string",
		// 	"defaultValue": "All",
		// 	"metadata": {
		// 		"description": "Volume type being targeted for encryption operatio"
		// 	}
		// },
		// "forceUpdateTag": {
		// 	"type": "string",
		// 	"defaultValue": "1.0",
		// 	"metadata": {
		// 		"description": "Pass in a unique value like a GUID everytime the operation needs to be force run"
		// 	}
		// },
		"utcValue": {
			"defaultValue": "[utcNow()]",
			"type": "string",
			"metadata": {
				"description": "UTC"
			}
		}
	},
	"variables": {
		// "vmName": "dualPassVM",
		"vmName": "cseResult",
		"nicName": "myVMNic",
		"addressPrefix": "10.0.0.0/16",
		"subnetName": "Subnet",
		"subnetPrefix": "10.0.0.0/24",
		"virtualNetworkName": "MyVNET",
		"publicIPAddressName": "myPublicIP",
		"networkSecurityGroupName": "default-NSG",
		"subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
		// "extensionName": "AzureDiskEncryptionForLinux",
		// "extensionVersion": "0.1",
		// "encryptionOperation": "EnableEncryption",
		// "keyVaultURL": "[concat('https://', parameters('keyVaultName'))]",
		// "keyVaultResourceID": "[concat(subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]",
		// "keyName": "[concat('key-', uniqueString(resourceGroup().id))]",
		"userIdentity": "[tolower(concat('ui-', uniquestring(resourceGroup().id)))]",
		"bootstrapRoleAssignmentId": "[guid(concat(resourceGroup().id, 'contributor'))]",
		"contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]"
	},
	"resources": [
		// {
		// 	"name": "[parameters('keyVaultName')]",
		// 	"type": "Microsoft.KeyVault/vaults",
		// 	"apiVersion": "2019-09-01",
		// 	"location": "[resourceGroup().location]",
		// 	"properties": {
		// 		"enableRbacAuthorization": true,
		// 		"enabledForDeployment": true,
		// 		"enabledForTemplateDeployment": true,
		// 		"enabledForDiskEncryption": true,
		// 		"tenantId": "[subscription().tenantId]",
		// 		"accessPolicies": [
		// 			{
		// 				"objectId": "[parameters('objectId')]",
		// 				"tenantId": "[subscription().tenantId]",
		// 				"permissions": {
		// 					"keys": [
		// 						"Get",
		// 						"List",
		// 						"Update",
		// 						"Create",
		// 						"Import",
		// 						"Delete",
		// 						"Recover",
		// 						"Backup",
		// 						"Restore",
		// 						"Decrypt",
		// 						"Encrypt",
		// 						"UnwrapKey",
		// 						"WrapKey",
		// 						"Verify",
		// 						"Sign",
		// 						"Release",
		// 						"Rotate",
		// 						"GetRotationPolicy",
		// 						"SetRotationPolicy",
		// 						"Purge"
		// 					],
		// 					"secrets": [
		// 						"Get",
		// 						"List",
		// 						"Set",
		// 						"Delete",
		// 						"Recover",
		// 						"Backup",
		// 						"Restore",
		// 						"Purge"
		// 					],
		// 					"certificates": [
		// 						"Get",
		// 						"List",
		// 						"Update",
		// 						"Create",
		// 						"Import",
		// 						"Delete",
		// 						"Recover",
		// 						"Backup",
		// 						"Restore",
		// 						"ManageContacts",
		// 						"ManageIssuers",
		// 						"GetIssuers",
		// 						"ListIssuers",
		// 						"SetIssuers",
		// 						"DeleteIssuers",
		// 						"Purge"
		// 					]
		// 				}
		// 			}
		// 		],
		// 		"sku": {
		// 			"name": "Standard",
		// 			"family": "A"
		// 		},
		// 		"networkAcls": {
		// 			"defaultAction": "Allow",
		// 			"bypass": "AzureServices"
		// 		}
		// 	}
		// },
		// {
		// 	"type": "Microsoft.KeyVault/vaults/keys",
		// 	"apiVersion": "2021-10-01",
		// 	"name": "[concat(parameters('keyVaultName'), '/', variables('keyName'))]",
		// 	"location": "[parameters('location')]",
		// 	"dependsOn": [
		// 		"[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
		// 	],
		// 	"properties": {
		// 		"kty": "RSA",
		// 		"keySize": 4096
		// 	}
		// },
		// {
		// 	"type": "Microsoft.KeyVault/vaults/secrets",
		// 	"apiVersion": "2019-09-01",
		// 	"name": "[format('{0}/{1}', parameters('keyVaultName'), 'encryptionSecret')]",
		// 	"tags": {
		// 		"machineName": "[variables('vmName')]"
		// 	},
		// 	"dependsOn": [
		// 		// "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), variables('keyName'))]"
		// 		"[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), variables('keyName'))]"
		// 	],
		// 	"properties": {
		// 		"attributes": {
		// 			"enabled": true
		// 		},
		// 		"contentType": "string",
		// 		"value": "test"
		// 	}
		// },
		// {
		// 	"type": "Microsoft.Resources/deployments",
		// 	"apiVersion": "2020-10-01",
		// 	"name": "role-assignment",
		// 	"properties": {
		// 		"expressionEvaluationOptions": {
		// 			"scope": "inner"
		// 		},
		// 		"mode": "Incremental",
		// 		"parameters": {
		// 			"keyVaultName": {
		// 				"value": "[parameters('keyVaultName')]"
		// 			},
		// 			"roleAssignmentName": {
		// 				"value": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity'))).principalId, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483'))]"
		// 			},
		// 			"roleDefinitionId": {
		// 				"value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]"
		// 			},
		// 			"principalId": {
		// 				"value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity'))).principalId]"
		// 			}
		// 		},
		// 		"template": {
		// 			"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		// 			"contentVersion": "1.0.0.0",
		// 			"parameters": {
		// 				"roleAssignmentName": {
		// 					"type": "string"
		// 				},
		// 				"roleDefinitionId": {
		// 					"type": "string"
		// 				},
		// 				"principalId": {
		// 					"type": "string"
		// 				},
		// 				"keyVaultName": {
		// 					"type": "string"
		// 				}
		// 			},
		// 			"resources": [
		// 				{
		// 					"type": "Microsoft.Authorization/roleAssignments",
		// 					"apiVersion": "2020-10-01-preview",
		// 					"scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
		// 					"name": "[parameters('roleAssignmentName')]",
		// 					"properties": {
		// 						"roleDefinitionId": "[parameters('roleDefinitionId')]",
		// 						"principalId": "[parameters('principalId')]",
		// 						"principalType": "ServicePrincipal"
		// 					}
		// 				}
		// 			]
		// 		}
		// 	},
		// 	"dependsOn": [
		// 		"[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
		// 		"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity'))]"
		// 	]
		// },
				{
					"type": "Microsoft.Network/publicIPAddresses",
					"apiVersion": "2020-08-01",
					"name": "[variables('publicIPAddressName')]",
					"location": "[parameters('location')]",
					"properties": {
						"publicIPAllocationMethod": "Dynamic"
					}
				},
				{
					"type": "Microsoft.Network/networkSecurityGroups",
					"apiVersion": "2020-08-01",
					"name": "[variables('networkSecurityGroupName')]",
					"location": "[parameters('location')]",
					"properties": {
						"securityRules": [
							{
								"name": "default-allow-22",
								"properties": {
									"priority": 1000,
									"access": "Allow",
									"direction": "Inbound",
									"destinationPortRange": "22",
									"protocol": "Tcp",
									"sourceAddressPrefix": "*",
									"sourcePortRange": "*",
									"destinationAddressPrefix": "*"
								}
							}
						]
					}
				},
				{
					"type": "Microsoft.Network/virtualNetworks",
					"apiVersion": "2020-08-01",
					"name": "[variables('virtualNetworkName')]",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
					],
					"properties": {
						"addressSpace": {
							"addressPrefixes": [
								"[variables('addressPrefix')]"
							]
						},
						"subnets": [
							{
								"name": "[variables('subnetName')]",
								"properties": {
									"addressPrefix": "[variables('subnetPrefix')]",
									"networkSecurityGroup": {
										"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
									}
								}
							}
						]
					}
				},
				{
					"type": "Microsoft.Network/networkInterfaces",
					"apiVersion": "2020-08-01",
					"name": "[variables('nicName')]",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[variables('publicIPAddressName')]",
						"[variables('virtualNetworkName')]"
					],
					"properties": {
						"ipConfigurations": [
							{
								"name": "ipconfig1",
								"properties": {
									"privateIPAllocationMethod": "Dynamic",
									"publicIPAddress": {
										"id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
									},
									"subnet": {
										"id": "[variables('subnetRef')]"
									}
								}
							}
						]
					}
				},
				{
					"type": "Microsoft.Storage/storageAccounts",
					"apiVersion": "2021-06-01",
					"name": "[parameters('storageUri')]",
					"location": "[parameters('location')]",
					"sku": {
						"name": "[parameters('storageAccountType')]"
					},
					"kind": "StorageV2",
					"properties": {}
				},
				{
					"type": "Microsoft.Compute/virtualMachines",
					"apiVersion": "2020-12-01",
					"name": "[variables('vmName')]",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[variables('nicName')]"
					],
					"properties": {
						"hardwareProfile": {
							"vmSize": "[parameters('vmSize')]"
						},
						"osProfile": {
							"computerName": "[variables('vmName')]",
							"adminUsername": "[parameters('adminUsername')]",
							"adminPassword": "[parameters('adminPassword')]"
						},
						"storageProfile": {
							"imageReference": {
								"publisher": "RedHat",
								"offer": "rhel-raw",
								"sku": "8-raw",
								"version": "latest"
							},
							"osDisk": {
								"createOption": "FromImage",
								"managedDisk": {
									"storageAccountType": "StandardSSD_LRS"
								}
							}
						},
						"networkProfile": {
							"networkInterfaces": [
								{
									"id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
								}
							]
						},
						"diagnosticsProfile": {
							"bootDiagnostics": {
								"enabled": true,
								"storageUri": "[concat('https://', parameters('storageUri'), '.blob.core.windows.net')]"
							}
						}
					}
				},
				{
					"type": "Microsoft.ManagedIdentity/userAssignedIdentities",
					"name": "[variables('userIdentity')]",
					"apiVersion": "2018-11-30",
					"location": "[parameters('location')]"
				},
				{
					"type": "Microsoft.Authorization/roleAssignments",
					"apiVersion": "2018-09-01-preview",
					"name": "[variables('bootstrapRoleAssignmentId')]",
					"dependsOn": [
						"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity'))]"
					],
					"properties": {
						"roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
						"principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity')), '2018-11-30').principalId]",
						"principalType": "ServicePrincipal"
					}
				},
				// {
				// 	"type": "Microsoft.Authorization/roleAssignments",
				// 	"apiVersion": "2020-10-01-preview",
				// 	"scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
				// 	"dependsOn": [
				// 		"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity'))]"
				// 	],
				// 	// "[guid(concat(resourceGroup().id, 'contributor'))]",
				// 	"name": "[guid(concat(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity')).principalId, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')))]",
				// 	"properties": {
				// 		"roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
				// 		"principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity'))).principalId]",
				// 		"principalType": "ServicePrincipal"
				// 	}
				// },
				{
					"type": "Microsoft.Resources/deploymentScripts",
					"apiVersion": "2020-10-01",
					"name": "getSecretFromVM",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity'))]",
						// "[resourceId('Microsoft.KeyVault/vaults/secrets', 'encryptionSecret')]"
						"[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
					],
					"identity": {
						"type": "UserAssigned",
						"userAssignedIdentities": {
							"[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity')))]": {}
						}
					},
					"kind": "AzureCLI",
					"properties": {
						"forceUpdateTag": "[parameters('utcValue')]",
						"azCliVersion": "2.40.0",
						"timeout": "PT30M",
						"environmentVariables": [
							{
								"name": "rgName",
								"value": "[resourceGroup().name]"
							},
							{
								"name": "vmName",
								"value": "[variables('vmName')]"
							}
						],
						"scriptContent": "results=$(az vm run-command invoke -g $rgName -n $vmName --command-id RunShellScript --scripts \"mkdir -p /var/log/azure/Microsoft.Azure.Security.AzureDiskEncryptionForLinux; echo 'Exited with message https://kvscripttest4.vault.azure.net:443/secrets/test/f8e35e693efb480b9877be79dcf3e296' > /var/log/azure/Microsoft.Azure.Security.AzureDiskEncryptionForLinux/extension.log;grep -m 1 'Exited with message http' /var/log/azure/Microsoft.Azure.Security.AzureDiskEncryptionForLinux/extension.log | grep -E '(http)(.*)' -o\");output=$(echo $results | jq '.value[0].message' | grep -E '(http)(.*\\)' -o | awk -F'\\' '{ print $1 }');echo $output;jq -n --arg output \"$output\" '{output:$output}' > $AZ_SCRIPTS_OUTPUT_PATH;",
						"cleanupPreference": "OnSuccess",
						"retentionInterval": "P1D"
					}
				}
	],
	"outputs": {
		"result": {
			"value": "[reference('getSecretFromVM').outputs]",
			"type": "object"
		},
		"output1": {
			"type": "object",
			"value": "[reference(resourceId('Microsoft.Resources/deploymentScripts','getSecretFromVM'), '2020-10-01', 'Full')]"
		// },
		// "output2": {
		// 	"type": "string",
		// 	"value": "[reference(resourceId('Microsoft.Resources/deploymentScripts','getSecretFromVM').outputs.text)]"
		}
	}
}
