{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"metadata": {
		"description": "Deploys 1 Key vault, 1 encrypted Ubuntu VM without AAD, 1 encrypted Ubuntu VM with AAD",
		"author": "Didier Ambroise",
		"GitHub": "https://github.com/dambro01/adelab",
		"Enablement": "https://learn.microsoft.com/en-us/troubleshoot/azure/virtual-machines/welcome-virtual-machines",
		"deploymentLink": "https://labbox.azurewebsites.net/api/Labbox?url=https://raw.githubusercontent.com/dambro01/adelab/main/adeLinuxDPSP.json"
	},
	"parameters": {
		"adminUsername": {
			"type": "String",
			"maxLength": 20,
			"metadata": {
				"description": "Username for the Virtual Machines."
			}
		},
		"adminPassword": {
			"type": "SecureString",
			"minLength": 12,
			"metadata": {
				"description": "Password for the Virtual Machines."
			}
		},
		"location": {
			"defaultValue": "[resourceGroup().location]",
			"type": "String",
			"metadata": {
				"description": "Location for all resources."
			}
		},
		"vmSize": {
			"defaultValue": "Standard_B2ms",
			"type": "String",
			"metadata": {
				"description": "Default VM Size."
			}
		},
		"storageUri": {
			"defaultValue": "[format('store{0}', uniqueString(resourceGroup().id))]",
			"type": "string",
			"metadata": {
				"description": "Name of storage account For Boot Diagnostics"
			}
		},
		"storageAccountType": {
			"type": "string",
			"defaultValue": "Standard_LRS",
			"metadata": {
				"description": "Storage Account type"
			}
		},
		"vaultName": {
			"defaultValue": "[concat('keyvault-', uniqueString(resourceGroup().id))]",
			"type": "String"
		},
		"keyName": {
			"defaultValue": "[concat('key-', uniqueString(resourceGroup().id))]",
			"type": "String"
		},
		"objectId": {
			"type": "String",
			"metadata": {
				"description": "Specifies your object ID. Get it by using Get-AzADUser -SignedIn cmdlet."
			}
		},
		"aadClientID": {
			"type": "string",
			"metadata": {
				"description": "Client ID of AAD app which has permissions to KeyVault"
			}
		},
		"aadClientSecret": {
			"type": "securestring",
			"metadata": {
				"description": "Client Secret of AAD app which has permissions to KeyVault"
			}
		}
	},
	"variables": {
		"nicName": "myVMNic",
		"addressPrefix": "10.0.0.0/16",
		"subnetName": "Subnet",
		"subnetPrefix": "10.0.0.0/24",
		"subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
		"WindowsVMName": "WindowsLab",
		"virtualNetworkName": "MyVNET",
		"publicIPAddressName": "myPublicIP",
		"networkSecurityGroupName": "default-NSG",
		"WindowsVMCount": 2,
		"encryptionOperation": "EnableEncryption",
		"KeyEncryptionAlgorithm": "RSA-OAEP",
		"KeyVaultURL": "[concat('https://', parameters('vaultName'), '.vault.azure.net/')]",
		"KeyVaultResourceId": "[concat(subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.KeyVault/vaults/', parameters('vaultName'))]",
		"VolumeType": "OS",
		"utcValue": "[utcNow()]",
		"userIdentity": "[tolower(concat('ui-', uniquestring(resourceGroup().id)))]",
		"bootstrapRoleAssignmentId": "[guid(concat(resourceGroup().id, 'contributor'))]",
		"contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]"
	},
	"resources": [
		{
			"type": "Microsoft.ManagedIdentity/userAssignedIdentities",
			"name": "[variables('userIdentity')]",
			"apiVersion": "2018-11-30",
			"location": "[parameters('location')]"
		},
		{
			"type": "Microsoft.Authorization/roleAssignments",
			"apiVersion": "2018-09-01-preview",
			"name": "[variables('bootstrapRoleAssignmentId')]",
			"dependsOn": [
				"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity'))]"
			],
			"properties": {
				"roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
				"principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity')), '2018-11-30').principalId]",
				"principalType": "ServicePrincipal"
			}
		},
		{
			"type": "Microsoft.KeyVault/vaults",
			"apiVersion": "2019-09-01",
			"name": "[parameters('vaultName')]",
			"location": "[parameters('location')]",
			"properties": {
				"enabledForDeployment": "[true()]",
				"enabledForDiskEncryption": "[true()]",
				"enabledForTemplateDeployment": "[true()]",
				"enableSoftDelete": "[true()]",
				"softDeleteRetentionInDays": 7,
				"enablePurgeProtection": "[true()]",
				"tenantId": "[subscription().tenantId]",
				"accessPolicies": [
					{
						"objectId": "[parameters('objectId')]",
						"tenantId": "[subscription().tenantId]",
						"permissions": {
							"keys": [
								"Get",
								"List",
								"Update",
								"Create",
								"Import",
								"Delete",
								"Recover",
								"Backup",
								"Restore",
								"Decrypt",
								"Encrypt",
								"UnwrapKey",
								"WrapKey",
								"Verify",
								"Sign",
								"Release",
								"Rotate",
								"GetRotationPolicy",
								"SetRotationPolicy",
								"Purge"
							],
							"secrets": [
								"Get",
								"List",
								"Set",
								"Delete",
								"Recover",
								"Backup",
								"Restore",
								"Purge"
							],
							"certificates": [
								"Get",
								"List",
								"Update",
								"Create",
								"Import",
								"Delete",
								"Recover",
								"Backup",
								"Restore",
								"ManageContacts",
								"ManageIssuers",
								"GetIssuers",
								"ListIssuers",
								"SetIssuers",
								"DeleteIssuers",
								"Purge"
							]
						}
					}
				],
				"sku": {
					"name": "Standard",
					"family": "A"
				},
				"networkAcls": {
					"defaultAction": "Allow",
					"bypass": "AzureServices"
				}
			}
		},
		{
			"type": "Microsoft.KeyVault/vaults/keys",
			"apiVersion": "2021-10-01",
			"name": "[concat(parameters('vaultName'), '/', parameters('keyName'))]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
			],
			"properties": {
				"kty": "RSA",
				"keySize": 4096
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2020-08-01",
			"name": "[concat(variables('publicIPAddressName'), copyIndex(1))]",
			"copy": {
				"name": "publicIPcopy",
				"count": "[variables('WindowsVMCount')]"
			},
			"location": "[parameters('location')]",
			"properties": {
				"publicIPAllocationMethod": "Dynamic"
			}
		},
		{
			"type": "Microsoft.Network/networkSecurityGroups",
			"apiVersion": "2020-08-01",
			"name": "[variables('networkSecurityGroupName')]",
			"location": "[parameters('location')]",
			"properties": {
				"securityRules": []
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks",
			"apiVersion": "2020-08-01",
			"name": "[variables('virtualNetworkName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
			],
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [
					{
						"name": "[variables('subnetName')]",
						"properties": {
							"addressPrefix": "[variables('subnetPrefix')]",
							"networkSecurityGroup": {
								"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2020-08-01",
			"name": "[concat(variables('nicName'), copyIndex(1))]",
			"copy": {
				"count": "[variables('WindowsVMCount')]",
				"name": "nicCopy"
			},
			"location": "[parameters('location')]",
			"dependsOn": [
				"publicIPcopy",
				"[variables('virtualNetworkName')]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'), copyIndex(1)))]"
							},
							"subnet": {
								"id": "[variables('subnetRef')]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2021-06-01",
			"name": "[parameters('storageUri')]",
			"location": "[parameters('location')]",
			"sku": {
				"name": "[parameters('storageAccountType')]"
			},
			"kind": "StorageV2",
			"properties": {}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2020-12-01",
			"name": "[concat(variables('WindowsVMName'), copyIndex(1))]",
			"copy": {
				"count": "[variables('WindowsVMCount')]",
				"name": "windowsVMcopy"
			},
			"location": "[parameters('location')]",
			"identity": {
				"type": "UserAssigned",
				"userAssignedIdentities": {
					"[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userIdentity'))]": {}
				}
			},
			"dependsOn": [
				"nicCopy",
				"[variables('nicName')]",
				"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity'))]"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[parameters('vmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('WindowsVMName'), copyIndex(1))]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "MicrosoftWindowsServer",
						"offer": "WindowsServer",
						"sku": "2019-Datacenter",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage",
						"managedDisk": {
							"storageAccountType": "StandardSSD_LRS"
						}
					}
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyIndex(1)))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[concat('https://', parameters('storageUri'), '.blob.core.windows.net')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"apiVersion": "2019-07-01",
			"name": "[concat(variables('WindowsVMName'),'1', '/AzureDiskEncryptionSinglePass')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines/', variables('WindowsVMName')),'1')]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Security",
				"type": "AzureDiskEncryption",
				"typeHandlerVersion": "2.2",
				"autoUpgradeMinorVersion": false,
				"settings": {
					"AntimalwareEnabled": false,
					"EncryptionOperation": "[variables('encryptionOperation')]",
					"KeyEncryptionAlgorithm": "[variables('KeyEncryptionAlgorithm')]",
					"KeyVaultURL": "[variables('KeyVaultURL')]",
					"KeyVaultResourceId": "[variables('KeyVaultResourceId')]",
					"VolumeType": "[variables('VolumeType')]"
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"apiVersion": "2019-07-01",
			"name": "[concat(variables('WindowsVMName'),'2', '/AzureDiskEncryptionDualPass')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines/', variables('WindowsVMName')),'2')]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Security",
				"type": "AzureDiskEncryption",
				"typeHandlerVersion": "1.1",
				"autoUpgradeMinorVersion": false,
				"settings": {
					"AntimalwareEnabled": false,
					"AADClientID": "[parameters('aadClientID')]",
					"AADClientSecret": "[parameters('aadClientSecret')]",
					"EncryptionOperation": "[variables('encryptionOperation')]",
					"KeyEncryptionAlgorithm": "[variables('KeyEncryptionAlgorithm')]",
					"KeyVaultURL": "[variables('KeyVaultURL')]",
					"KeyVaultResourceId": "[variables('KeyVaultResourceId')]",
					"VolumeType": "[variables('VolumeType')]"
				}
			}
		},
		{
			"type": "Microsoft.Resources/deploymentScripts",
			"apiVersion": "2020-10-01",
			"name": "[concat('encryptionStatusCheck', copyIndex(1))]",
			"location": "[parameters('location')]",
			"copy": {
				"count": "[variables('WindowsVMCount')]",
				"name": "deploymentScriptCopy"
			},
			"dependsOn": [
				"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity'))]",
				"windowsVMcopy",
				"[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(variables('WindowsVMName'), '2'), 'AzureDiskEncryptionDualPass')]",
				"[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(variables('WindowsVMName'), '1'), 'AzureDiskEncryptionSinglePass')]"
			],
			"identity": {
				"type": "UserAssigned",
				"userAssignedIdentities": {
					"[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userIdentity')))]": {}
				}
			},
			"kind": "AzurePowerShell",
			"properties": {
				"forceUpdateTag": "[variables('utcValue')]",
				"azPowerShellVersion": "3.0",
				"timeout": "PT30M",
				"arguments": "[format(' -rgName {0} -vmName {1} -subID {2}', resourceGroup().name, concat(variables('WindowsVMName'), copyIndex(1)), subscription().subscriptionId)]",
				"scriptContent": "param( [string] [Parameter(Mandatory=$true)] $rgName, [string] [Parameter(Mandatory=$true)] $vmName, [string] [Parameter(Mandatory=$true)] $subID); $ErrorActionPreference = 'Stop'; Set-AzContext -Subscription $subID; Set-AzDefault -ResourceGroupName $rgName; $status = ''; while ([String]::IsNullOrWhiteSpace($status)) { $runCommand = Invoke-AzVMRunCommand -ResourceGroupName $rgName -name $vmName -CommandId 'RunPowerShellScript' -ScriptString '$encryptionStatus = Manage-bde -status;$encryptionStatus -like \"*Percentage Encrypted: 100.0%*\"'; $status = ($runCommand.Value | Where-Object { $_.Code -like '*StdOut*' }).Message; }",
				"cleanupPreference": "OnSuccess",
				"retentionInterval": "P1D"
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('WindowsVMName'),'1', '/injectRunCommandScript')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines/', variables('WindowsVMName')),'1')]",
				// "deploymentScriptCopy",
				"[concat(resourceId('Microsoft.Resources/deploymentScripts/', 'encryptionStatusCheck', '1'))]"
			],
			"properties": {
				"source": {
					"script": "bcdedit /delete '{current}'; Restart-Computer -Force"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('WindowsVMName'),'2', '/injectRunCommandScript')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines/', variables('WindowsVMName')),'2')]",
				// "deploymentScriptCopy",
				"[concat(resourceId('Microsoft.Resources/deploymentScripts/', 'encryptionStatusCheck', '2'))]"
			],
			"properties": {
				"source": {
					"script": "bcdedit /delete '{current}'; Restart-Computer -Force"
				},
				"timeoutInSeconds": 60
			}
		}
	]
}
